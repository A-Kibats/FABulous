-- NumberOfConfigBits:61
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use work.my_package.all;

entity  W_IO_switch_matrix  is 
	Generic ( 
			 NoConfigBits : integer := 61 );
	Port (
		 -- switch matrix inputs
		  W1END0 	: in 	 STD_LOGIC;
		  W1END1 	: in 	 STD_LOGIC;
		  W1END2 	: in 	 STD_LOGIC;
		  W1END3 	: in 	 STD_LOGIC;
		  W2MID0 	: in 	 STD_LOGIC;
		  W2MID1 	: in 	 STD_LOGIC;
		  W2MID2 	: in 	 STD_LOGIC;
		  W2MID3 	: in 	 STD_LOGIC;
		  W2MID4 	: in 	 STD_LOGIC;
		  W2MID5 	: in 	 STD_LOGIC;
		  W2MID6 	: in 	 STD_LOGIC;
		  W2MID7 	: in 	 STD_LOGIC;
		  W2END0 	: in 	 STD_LOGIC;
		  W2END1 	: in 	 STD_LOGIC;
		  W2END2 	: in 	 STD_LOGIC;
		  W2END3 	: in 	 STD_LOGIC;
		  W2END4 	: in 	 STD_LOGIC;
		  W2END5 	: in 	 STD_LOGIC;
		  W2END6 	: in 	 STD_LOGIC;
		  W2END7 	: in 	 STD_LOGIC;
		  W6END0 	: in 	 STD_LOGIC;
		  W6END1 	: in 	 STD_LOGIC;
		  W6END2 	: in 	 STD_LOGIC;
		  W6END3 	: in 	 STD_LOGIC;
		  W6END4 	: in 	 STD_LOGIC;
		  W6END5 	: in 	 STD_LOGIC;
		  W6END6 	: in 	 STD_LOGIC;
		  W6END7 	: in 	 STD_LOGIC;
		  W6END8 	: in 	 STD_LOGIC;
		  W6END9 	: in 	 STD_LOGIC;
		  W6END10 	: in 	 STD_LOGIC;
		  W6END11 	: in 	 STD_LOGIC;
		  A_O 	: in 	 STD_LOGIC;
		  A_Q 	: in 	 STD_LOGIC;
		  B_O 	: in 	 STD_LOGIC;
		  B_Q 	: in 	 STD_LOGIC;
		  # 	: in 	 STD_LOGIC;
		   	: in 	 STD_LOGIC;
		  E1BEG0 	: out 	 STD_LOGIC;
		  E1BEG1 	: out 	 STD_LOGIC;
		  E1BEG2 	: out 	 STD_LOGIC;
		  E1BEG3 	: out 	 STD_LOGIC;
		  E2BEG0 	: out 	 STD_LOGIC;
		  E2BEG1 	: out 	 STD_LOGIC;
		  E2BEG2 	: out 	 STD_LOGIC;
		  E2BEG3 	: out 	 STD_LOGIC;
		  E2BEG4 	: out 	 STD_LOGIC;
		  E2BEG5 	: out 	 STD_LOGIC;
		  E2BEG6 	: out 	 STD_LOGIC;
		  E2BEG7 	: out 	 STD_LOGIC;
		  E2BEGb0 	: out 	 STD_LOGIC;
		  E2BEGb1 	: out 	 STD_LOGIC;
		  E2BEGb2 	: out 	 STD_LOGIC;
		  E2BEGb3 	: out 	 STD_LOGIC;
		  E2BEGb4 	: out 	 STD_LOGIC;
		  E2BEGb5 	: out 	 STD_LOGIC;
		  E2BEGb6 	: out 	 STD_LOGIC;
		  E2BEGb7 	: out 	 STD_LOGIC;
		  E6BEG0 	: out 	 STD_LOGIC;
		  E6BEG1 	: out 	 STD_LOGIC;
		  E6BEG2 	: out 	 STD_LOGIC;
		  E6BEG3 	: out 	 STD_LOGIC;
		  E6BEG4 	: out 	 STD_LOGIC;
		  E6BEG5 	: out 	 STD_LOGIC;
		  E6BEG6 	: out 	 STD_LOGIC;
		  E6BEG7 	: out 	 STD_LOGIC;
		  E6BEG8 	: out 	 STD_LOGIC;
		  E6BEG9 	: out 	 STD_LOGIC;
		  E6BEG10 	: out 	 STD_LOGIC;
		  E6BEG11 	: out 	 STD_LOGIC;
		  A_I 	: out 	 STD_LOGIC;
		  A_T 	: out 	 STD_LOGIC;
		  B_I 	: out 	 STD_LOGIC;
		  B_T 	: out 	 STD_LOGIC;
		   	: out 	 STD_LOGIC;
		  # 	: out 	 STD_LOGIC;
	-- global
		 ConfigBits : in 	 STD_LOGIC_VECTOR( NoConfigBits -1 downto 0 )
	);
end entity W_IO_switch_matrix ;

architecture Behavioral of  W_IO_switch_matrix  is 

constant GND0	 : std_logic := '0';
constant GND	 : std_logic := '0';
constant VCC0	 : std_logic := '1';
constant VCC	 : std_logic := '1';
constant VDD0	 : std_logic := '1';
constant VDD	 : std_logic := '1';
	
signal 	  E1BEG0_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E1BEG1_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E1BEG2_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E1BEG3_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEG0_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEG1_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEG2_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEG3_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEG4_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEG5_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEG6_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEG7_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEGb0_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEGb1_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEGb2_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEGb3_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEGb4_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEGb5_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEGb6_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E2BEGb7_input 	:	 std_logic_vector( 3 - 1 downto 0 );
signal 	  E6BEG0_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG1_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG2_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG3_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG4_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG5_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG6_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG7_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG8_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG9_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG10_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  E6BEG11_input 	:	 std_logic_vector( 1 - 1 downto 0 );
signal 	  A_I_input 	:	 std_logic_vector( 18 - 1 downto 0 );
signal 	  A_T_input 	:	 std_logic_vector( 6 - 1 downto 0 );
signal 	  B_I_input 	:	 std_logic_vector( 18 - 1 downto 0 );
signal 	  B_T_input 	:	 std_logic_vector( 6 - 1 downto 0 );
signal 	  _input 	:	 std_logic_vector( 0 - 1 downto 0 );
signal 	  #_input 	:	 std_logic_vector( 23 - 1 downto 0 );

-- The configuration bits (if any) are just a long shift register

-- This shift register is padded to an even number of flops/latches

begin

-- switch matrix multiplexer  E1BEG0 		MUX-3
E1BEG0_input 	 <=  & # & W1END3;
E1BEG0	<= E1BEG0_input(TO_INTEGER(UNSIGNED(ConfigBits(1 downto 0))));
 
-- switch matrix multiplexer  E1BEG1 		MUX-3
E1BEG1_input 	 <=  & # & W1END2;
E1BEG1	<= E1BEG1_input(TO_INTEGER(UNSIGNED(ConfigBits(3 downto 2))));
 
-- switch matrix multiplexer  E1BEG2 		MUX-3
E1BEG2_input 	 <=  & # & W1END1;
E1BEG2	<= E1BEG2_input(TO_INTEGER(UNSIGNED(ConfigBits(5 downto 4))));
 
-- switch matrix multiplexer  E1BEG3 		MUX-3
E1BEG3_input 	 <=  & # & W1END0;
E1BEG3	<= E1BEG3_input(TO_INTEGER(UNSIGNED(ConfigBits(7 downto 6))));
 
-- switch matrix multiplexer  E2BEG0 		MUX-3
E2BEG0_input 	 <=  & # & W2MID7;
E2BEG0	<= E2BEG0_input(TO_INTEGER(UNSIGNED(ConfigBits(9 downto 8))));
 
-- switch matrix multiplexer  E2BEG1 		MUX-3
E2BEG1_input 	 <=  & # & W2MID6;
E2BEG1	<= E2BEG1_input(TO_INTEGER(UNSIGNED(ConfigBits(11 downto 10))));
 
-- switch matrix multiplexer  E2BEG2 		MUX-3
E2BEG2_input 	 <=  & # & W2MID5;
E2BEG2	<= E2BEG2_input(TO_INTEGER(UNSIGNED(ConfigBits(13 downto 12))));
 
-- switch matrix multiplexer  E2BEG3 		MUX-3
E2BEG3_input 	 <=  & # & W2MID4;
E2BEG3	<= E2BEG3_input(TO_INTEGER(UNSIGNED(ConfigBits(15 downto 14))));
 
-- switch matrix multiplexer  E2BEG4 		MUX-3
E2BEG4_input 	 <=  & # & W2MID3;
E2BEG4	<= E2BEG4_input(TO_INTEGER(UNSIGNED(ConfigBits(17 downto 16))));
 
-- switch matrix multiplexer  E2BEG5 		MUX-3
E2BEG5_input 	 <=  & # & W2MID2;
E2BEG5	<= E2BEG5_input(TO_INTEGER(UNSIGNED(ConfigBits(19 downto 18))));
 
-- switch matrix multiplexer  E2BEG6 		MUX-3
E2BEG6_input 	 <=  & # & W2MID1;
E2BEG6	<= E2BEG6_input(TO_INTEGER(UNSIGNED(ConfigBits(21 downto 20))));
 
-- switch matrix multiplexer  E2BEG7 		MUX-3
E2BEG7_input 	 <=  & # & W2MID0;
E2BEG7	<= E2BEG7_input(TO_INTEGER(UNSIGNED(ConfigBits(23 downto 22))));
 
-- switch matrix multiplexer  E2BEGb0 		MUX-3
E2BEGb0_input 	 <=  & # & W2END7;
E2BEGb0	<= E2BEGb0_input(TO_INTEGER(UNSIGNED(ConfigBits(25 downto 24))));
 
-- switch matrix multiplexer  E2BEGb1 		MUX-3
E2BEGb1_input 	 <=  & # & W2END6;
E2BEGb1	<= E2BEGb1_input(TO_INTEGER(UNSIGNED(ConfigBits(27 downto 26))));
 
-- switch matrix multiplexer  E2BEGb2 		MUX-3
E2BEGb2_input 	 <=  & # & W2END5;
E2BEGb2	<= E2BEGb2_input(TO_INTEGER(UNSIGNED(ConfigBits(29 downto 28))));
 
-- switch matrix multiplexer  E2BEGb3 		MUX-3
E2BEGb3_input 	 <=  & # & W2END4;
E2BEGb3	<= E2BEGb3_input(TO_INTEGER(UNSIGNED(ConfigBits(31 downto 30))));
 
-- switch matrix multiplexer  E2BEGb4 		MUX-3
E2BEGb4_input 	 <=  & # & W2END3;
E2BEGb4	<= E2BEGb4_input(TO_INTEGER(UNSIGNED(ConfigBits(33 downto 32))));
 
-- switch matrix multiplexer  E2BEGb5 		MUX-3
E2BEGb5_input 	 <=  & # & W2END2;
E2BEGb5	<= E2BEGb5_input(TO_INTEGER(UNSIGNED(ConfigBits(35 downto 34))));
 
-- switch matrix multiplexer  E2BEGb6 		MUX-3
E2BEGb6_input 	 <=  & # & W2END1;
E2BEGb6	<= E2BEGb6_input(TO_INTEGER(UNSIGNED(ConfigBits(37 downto 36))));
 
-- switch matrix multiplexer  E2BEGb7 		MUX-3
E2BEGb7_input 	 <=  & # & W2END0;
E2BEGb7	<= E2BEGb7_input(TO_INTEGER(UNSIGNED(ConfigBits(39 downto 38))));
 
-- switch matrix multiplexer  E6BEG0 		MUX-1
